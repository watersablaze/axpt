generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TokenType {
  AXG
  NMP
  USD
  OTHER
}

model User {
  id           String  @id @default(cuid())
  username     String  @unique
  passwordHash String
  email        String  @unique
  isAdmin      Boolean @default(false)

  accessToken         String?   @unique
  accessTokenHash     String?
  accessTokenIssuedAt DateTime?

  name        String?
  displayName String?
  tier        String?
  partnerSlug String? // âœ… ADD THIS LINE

  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  lastLogin   DateTime?
  loginCount  Int      @default(0)
  viewedDocs  String[]
  sessionLogs SessionLog[]

  wallets             Wallet[]
  balances            Balance[]
  transactions        Transaction[]
  stakes              Stake[]
  investmentProposals InvestmentProposal[]
  nftBadges           NFTBadge[]
  simProfiles         SimProfile[]
  nodeSyncStatuses    NodeSyncStatus[]
  revokedTokens       RevokedToken[]
  sessions            Session[]
  contractLogs        ContractInteractionLog[]

  blockchainWallet   BlockchainWallet?
  blockchainWalletId String?  @unique
}


model SessionLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  timestamp DateTime @default(now())
  ip        String?
  location  String?
  device    String?
  action    String   @default("login")
  path      String?
  details   Json?
}

model PinLoginRequest {
  id        String   @id @default(cuid())
  email     String   @unique
  pinHash   String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Wallet {
  id      String @id @default(cuid())
  userId  String
  address String @unique

  user         User              @relation(fields: [userId], references: [id])
  balances     Balance[]
  transactions Transaction[]
  blockchain   BlockchainWallet?
}

model Balance {
  id        String    @id @default(cuid())
  walletId  String
  userId    String
  tokenType TokenType
  amount    Float     @default(0)

  wallet Wallet @relation(fields: [walletId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model BlockchainWallet {
  id       String @id @default(cuid())
  walletId String @unique
  userId   String @unique

  wallet Wallet @relation(fields: [walletId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model Transaction {
  id        String    @id @default(cuid())
  userId    String
  walletId  String
  type      String
  amount    Float
  tokenType TokenType
  txHash    String?
  metadata  Json?
  createdAt DateTime  @default(now())

  user   User   @relation(fields: [userId], references: [id])
  wallet Wallet @relation(fields: [walletId], references: [id])
}

model SmartContract {
  id        String   @id @default(cuid())
  name      String
  address   String   @unique
  abi       Json
  network   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  interactions ContractInteractionLog[]
}

model ContractInteractionLog {
  id           String   @id @default(cuid())
  userId       String
  contractId   String
  functionName String
  args         Json
  result       Json?
  txHash       String?
  status       String
  createdAt    DateTime @default(now())

  user     User          @relation(fields: [userId], references: [id])
  contract SmartContract @relation(fields: [contractId], references: [id])
}

model Session {
  id         String    @id @default(cuid())
  userId     String
  deviceInfo String?
  ip         String?
  location   String?
  userAgent  String?
  status     String    @default("active")
  startedAt  DateTime  @default(now())
  endedAt    DateTime?

  user User @relation(fields: [userId], references: [id])
}

model SessionActionLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  timestamp DateTime @default(now())
  ip        String?
  userAgent String?
}

model Stake {
  id        String   @id @default(cuid())
  userId    String
  amount    Float
  apy       Float
  type      String
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)

  user User @relation(fields: [userId], references: [id])
}

model InvestmentProposal {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  amount      Float
  status      String?  @default("pending")
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model NFTBadge {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  imageUrl    String?
  mintedAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model SimProfile {
  id        String   @id @default(cuid())
  userId    String
  deviceId  String
  carrier   String
  country   String
  simHash   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model NodeSyncStatus {
  id       String   @id @default(cuid())
  userId   String
  status   String
  syncedAt DateTime

  user User @relation(fields: [userId], references: [id])
}

model RevokedToken {
  id        String   @id @default(cuid())
  rawToken  String
  partner   String
  tier      String
  createdAt DateTime @default(now())

  userId String?
  user   User?   @relation(fields: [userId], references: [id])
}

model Partner {
  id           String   @id @default(cuid())
  slug         String   @unique
  name         String
  email        String?
  tier         String
  token        String
  docs         String[]
  popupMessage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  lastLogin  DateTime?
  loginCount Int       @default(0)
  viewedDocs String[]  @default([])
}

model TokenAccessLog {
  id         String   @id @default(cuid())
  token      String
  tier       String
  partner    String
  path       String
  accessedAt DateTime @default(now())
}

model IssuedToken {
  id        String   @id @default(cuid())
  partner   String
  tier      String
  docs      String[]
  token     String
  createdAt DateTime @default(now())
}

model LogoutLog {
  id        String   @id @default(cuid())
  userId    String
  timestamp DateTime @default(now())
  reason    String
  ip        String
  userAgent String?
}

model GemIntake {
  id         String   @id @default(cuid())
  name       String
  email      String
  desiredGem String
  format     String?
  size       String?
  quantity   String?
  notes      String?
  createdAt  DateTime @default(now())
}