// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * =========================
 * Shared / core domain
 * =========================
 */

enum TokenType {
  AXG
  NMP
  USD
  OTHER
}

model User {
  id           String  @id @default(cuid())
  username     String  @unique
  passwordHash String
  email        String  @unique
  isAdmin      Boolean @default(false)

  // Access tokens (optional legacy / partner)
  accessToken         String?   @unique
  accessTokenHash     String?
  accessTokenIssuedAt DateTime?

  // Profile-ish fields
  name        String?
  displayName String?
  tier        String?
  partnerSlug String?

  // Timestamps / metrics
  updatedAt  DateTime  @updatedAt
  createdAt  DateTime  @default(now())
  lastLogin  DateTime?
  loginCount Int       @default(0)
  viewedDocs String[]

  // Wallet linkage (optional)
  blockchainWalletId String?           @unique
  blockchainWallet   BlockchainWallet?

  // Backrefs
  balances     Balance[]
  transactions Transaction[]
  wallets      Wallet[]

  // Logs & sessions
  contractLogs      ContractInteractionLog[]
  sessions          Session[]
  sessionLogs       SessionLog[]
  sessionActionLogs SessionActionLog[]
  revokedTokens     RevokedToken[]
  logoutLogs        LogoutLog[]

  // Other user-linked data
  nftBadges        NFTBadge[]
  nodeSyncStatuses NodeSyncStatus[]
  simProfiles      SimProfile[]
  stakes           Stake[]

  // Tokens / requests
  createdTokens         Token[]                @relation("TokensCreatedBy")
  tokenIssuanceRequests TokenIssuanceRequest[] @relation("RequestsByUser")
  investmentProposals   InvestmentProposal[]

  // Governance role (optional)
  councilElder CouncilElder?

  // Projects & Reviews
  projects Project[]
  reviews  ProjectReview[] @relation("Reviewer")

  // ===== Initiatives backrefs =====
  initiativesAuthored Initiative[]        @relation("InitiativesCreatedBy")
  initiativeUpdates   InitiativeUpdate[]  @relation("InitiativeUpdatesByUser")
  initiativeFundings  InitiativeFunding[]
}

// prisma/schema.prisma (add near your token models)
model AccessCode {
  id             String   @id @default(cuid())
  codeHash       String   @unique  // sha256(code + salt)
  humanCode      String?            // optional for admin UI display only (not required)
  partner        String
  tier           String             // "Investor" | "Partner" | ...
  email          String?
  docs           String[] @default([])
  displayName    String?
  greeting       String?
  popupMessage   String?

  // lifecycle
  expiresAt      DateTime?
  maxUses        Int      @default(1)
  usedCount      Int      @default(0)
  enabled        Boolean  @default(true)

  // audit
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  lastUsedAt     DateTime?
  lastUsedIp     String?
}

model SessionLog {
  id        String   @id @default(cuid())
  userId    String
  timestamp DateTime @default(now())
  ip        String?
  location  String?
  device    String?
  action    String   @default("login")
  path      String?
  details   Json?

  user User @relation(fields: [userId], references: [id])

  @@index([userId, timestamp])
}

model PinLoginRequest {
  id        String   @id @default(cuid())
  email     String   @unique
  pinHash   String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  balances     Balance[]
  transactions Transaction[]

  // Backref to on-chain mirror (optional)
  blockchainWallet BlockchainWallet?
}

model Balance {
  id String @id @default(cuid())

  // Relations
  walletId String
  wallet   Wallet @relation(fields: [walletId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Either a core enum token OR a dynamic Token row
  tokenType TokenType?
  tokenId   String?
  token     Token?     @relation(fields: [tokenId], references: [id])

  // Ledger values
  amount Float @default(0)

  @@unique([walletId, tokenType, tokenId])
  @@index([walletId])
  @@index([userId])
  @@index([tokenType])
  @@index([tokenId])
}

model BlockchainWallet {
  id String @id @default(cuid())

  walletId String @unique
  wallet   Wallet @relation(fields: [walletId], references: [id])

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  address   String?  @unique
  network   String?
  createdAt DateTime @default(now())
}

model Transaction {
  id       String @id @default(cuid())
  userId   String
  walletId String
  type     String
  amount   Float

  tokenType TokenType?
  tokenId   String?
  token     Token?     @relation(fields: [tokenId], references: [id])

  txHash    String?
  metadata  Json?
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  wallet Wallet @relation(fields: [walletId], references: [id])

  @@index([userId, createdAt])
  @@index([walletId, createdAt])
  @@index([tokenId])
  @@index([tokenType])
}

model SmartContract {
  id        String   @id @default(cuid())
  name      String
  address   String   @unique
  abi       Json
  network   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  interactions ContractInteractionLog[]
}

model ContractInteractionLog {
  id           String   @id @default(cuid())
  userId       String
  contractId   String
  functionName String
  args         Json
  result       Json?
  txHash       String?
  status       String
  createdAt    DateTime @default(now())

  contract SmartContract @relation(fields: [contractId], references: [id])
  user     User          @relation(fields: [userId], references: [id])

  @@index([contractId, createdAt])
  @@index([userId, createdAt])
}

model Session {
  id         String    @id @default(cuid())
  userId     String
  deviceInfo String?
  ip         String?
  location   String?
  userAgent  String?
  status     String    @default("active")
  startedAt  DateTime  @default(now())
  endedAt    DateTime?

  user User @relation(fields: [userId], references: [id])

  @@index([userId, startedAt])
}

model SessionActionLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  timestamp DateTime @default(now())
  ip        String?
  userAgent String?
  User      User     @relation(fields: [userId], references: [id])

  @@index([userId, timestamp])
}

model Stake {
  id        String   @id @default(cuid())
  userId    String
  amount    Float
  apy       Float
  type      String
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)

  user User @relation(fields: [userId], references: [id])

  @@index([userId, isActive])
}

model InvestmentProposal {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  amount      Float
  status      String?  @default("pending")
  createdAt   DateTime @default(now())

  user                  User                   @relation(fields: [userId], references: [id])
  tokenIssuanceRequests TokenIssuanceRequest[] @relation("RequestsForProject")

  @@index([userId, createdAt])
}

model NFTBadge {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  imageUrl    String?
  mintedAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, mintedAt])
}

model SimProfile {
  id        String   @id @default(cuid())
  userId    String
  deviceId  String
  carrier   String
  country   String
  simHash   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model NodeSyncStatus {
  id       String   @id @default(cuid())
  userId   String
  status   String
  syncedAt DateTime

  user User @relation(fields: [userId], references: [id])

  @@index([userId, syncedAt])
}

model RevokedToken {
  id        String   @id @default(cuid())
  rawToken  String   @unique
  partner   String
  tier      String
  createdAt DateTime @default(now())

  userId String?
  user   User?   @relation(fields: [userId], references: [id])
}

model Partner {
  id           String    @id @default(cuid())
  slug         String    @unique
  name         String
  email        String?
  tier         String
  token        String
  docs         String[]
  popupMessage String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastLogin    DateTime?
  loginCount   Int       @default(0)
  viewedDocs   String[]  @default([])
}

model TokenAccessLog {
  id         String   @id @default(cuid())
  token      String
  tier       String
  partner    String
  path       String
  accessedAt DateTime @default(now())

  @@index([token, accessedAt])
}

model IssuedToken {
  id        String   @id @default(cuid())
  partner   String
  tier      String
  docs      String[]
  token     String
  createdAt DateTime @default(now())
}

model LogoutLog {
  id        String   @id @default(cuid())
  userId    String
  timestamp DateTime @default(now())
  reason    String
  ip        String
  userAgent String?

  user User @relation(fields: [userId], references: [id])

  @@index([userId, timestamp])
}

model GemIntake {
  id           String   @id @default(cuid())
  name         String
  email        String
  phone        String?
  desiredGem   String
  format       String?
  size         String?
  quantity     String?
  notes        String?
  createdAt    DateTime @default(now())

  // New
  status       String   @default("new")
  internalNote String?
}

model DbPulseLog {
  id        String   @id @default(cuid())
  status    String
  message   String?
  createdAt DateTime @default(now())
}

/**
 * =========================
 * Token & Governance
 * =========================
 */

model Token {
  id          String   @id @default(cuid())
  symbol      String   @unique
  name        String
  decimals    Int      @default(2)
  description String?
  isCore      Boolean  @default(false)
  status      String   @default("active")
  totalSupply Float    @default(0)
  metadata    Json?
  createdAt   DateTime @default(now())

  createdById String?
  createdBy   User?   @relation("TokensCreatedBy", fields: [createdById], references: [id])

  approvedById String?
  approvedBy   CouncilElder? @relation("TokensApprovedBy", fields: [approvedById], references: [id])

  // Backrefs
  balances            Balance[]
  transactions        Transaction[]
  approvedForRequests TokenIssuanceRequest[] @relation("ApprovedTokenForRequests")
}

model CouncilElder {
  id       String   @id @default(cuid())
  userId   String   @unique
  title    String?
  joinedAt DateTime @default(now())
  isActive Boolean  @default(true)

  user User @relation(fields: [userId], references: [id])

  // Backrefs
  proposals      GovernanceProposal[] @relation("ElderAuthoredProposals")
  votes          GovernanceVote[]
  approvedTokens Token[]              @relation("TokensApprovedBy")
}

model GovernanceProposal {
  id            String    @id @default(cuid())
  authorElderId String
  title         String
  description   String?
  kind          String
  status        String    @default("pending")
  payload       Json?
  createdAt     DateTime  @default(now())
  decidedAt     DateTime?

  updatedAt         DateTime  @updatedAt
  quorum            Int?
  approvalThreshold Int?
  votingEndsAt      DateTime?
  timelockSeconds   Int?
  approvedAt        DateTime?
  readyAt           DateTime?
  executedAt        DateTime?

  authorElder CouncilElder     @relation(name: "ElderAuthoredProposals", fields: [authorElderId], references: [id])
  votes       GovernanceVote[]

  @@index([status, createdAt])
  @@index([votingEndsAt])
}

model GovernanceVote {
  id         String   @id @default(cuid())
  elderId    String
  proposalId String
  choice     String
  reason     String?
  createdAt  DateTime @default(now())

  elder    CouncilElder       @relation(fields: [elderId], references: [id])
  proposal GovernanceProposal @relation(fields: [proposalId], references: [id])

  @@unique([elderId, proposalId])
  @@index([proposalId, createdAt])
  @@index([elderId, proposalId])
}

model TokenIssuanceRequest {
  id          String    @id @default(cuid())
  requestedBy String
  projectId   String?
  symbol      String
  name        String
  decimals    Int       @default(2)
  purpose     String?
  metadata    Json?
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  decidedAt   DateTime?

  approvedTokenId String?
  approvedToken   Token?  @relation("ApprovedTokenForRequests", fields: [approvedTokenId], references: [id])

  requester User                @relation("RequestsByUser", fields: [requestedBy], references: [id])
  project   InvestmentProposal? @relation("RequestsForProject", fields: [projectId], references: [id])

  @@index([requestedBy, createdAt])
  @@index([status, createdAt])
}

/**
 * =========================
 * Projects (resident-only)
 * =========================
 */

enum ProjectStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  DENIED
  FUNDED
}

model Project {
  id           String        @id @default(cuid())
  userId       String
  title        String
  summary      String        @db.Text
  requestedAxg Decimal       @db.Decimal(18, 2)
  status       ProjectStatus @default(SUBMITTED)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews ProjectReview[]

  @@index([userId, status])
  @@index([createdAt])
}

model ProjectReview {
  id         String   @id @default(cuid())
  projectId  String
  reviewerId String
  action     String
  note       String?
  createdAt  DateTime @default(now())

  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reviewer User    @relation("Reviewer", fields: [reviewerId], references: [id], onDelete: Cascade)

  @@index([projectId, reviewerId])
  @@index([createdAt])
}

model CouncilSettings {
  id              String   @id @default("singleton")
  councilEmails   String[] @default([])
  slackWebhookUrl String?
  fromEmail       String?
  provider        String?
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())
}

/**
 * =========================
 * Initiatives
 * =========================
 */

enum InitiativeStatus {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
  COMPLETED
}

enum InitiativeCategory {
  ENERGY
  FINTECH
  DATA
  SECURITY
  OTHER
}

model Initiative {
  id        String             @id @default(cuid())
  slug      String             @unique
  title     String
  summary   String             @db.Text
  category  InitiativeCategory @default(OTHER)
  status    InitiativeStatus   @default(DRAFT)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Optional author
  createdById String?
  createdBy   User?   @relation("InitiativesCreatedBy", fields: [createdById], references: [id])

  // Optional cached totals
  fundingGoal     Decimal? @db.Decimal(18, 2)
  fundingReceived Decimal  @default(0) @db.Decimal(18, 2)

  // Backrefs
  fundings InitiativeFunding[]
  updates  InitiativeUpdate[]

  @@index([slug])
  @@index([status, category])
}

model InitiativeUpdate {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String?
  body  String

  initiativeId String
  initiative   Initiative @relation(fields: [initiativeId], references: [id], onDelete: Cascade)

  authorId String?
  author   User?   @relation("InitiativeUpdatesByUser", fields: [authorId], references: [id])

  @@index([initiativeId, createdAt])
}

model InitiativeFunding {
  id           String   @id @default(cuid())
  initiativeId String
  userId       String?
  amount       Decimal  @db.Decimal(18, 2)
  note         String?
  createdAt    DateTime @default(now())

  initiative Initiative @relation(fields: [initiativeId], references: [id])
  user       User?      @relation(fields: [userId], references: [id])

  @@index([initiativeId, createdAt])
  @@index([userId])
}

model CadaWaitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("CadaWaitlist") // This is case-sensitive
}