generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  username String  @unique
  password String
  email    String  @unique
  isAdmin  Boolean @default(false)

  accessToken String  @unique // üîê NLX onboarding token
  name        String?         // ‚ú® Optional name

  tier        String?         // üéñÔ∏è For routing + privileges
  partnerSlug String?         // ü§ù Linked partner
  accessTokenHash        String?  // new: hashed session token
  accessTokenIssuedAt    DateTime? // new: token timestamp
  updatedAt              DateTime @updatedAt

  wallets             Wallet[]
  transactions        Transaction[]
  stakes              Stake[]
  investmentProposals InvestmentProposal[]
  nftBadges           NFTBadge[]
  simProfiles         SimProfile[]
  nodeSyncStatuses    NodeSyncStatus[]
  revokedTokens       RevokedToken[]

  blockchainWallet   BlockchainWallet? @relation(name: "UserToBlockchainWallet")
  blockchainWalletId String?           @unique @db.ObjectId

  createdAt DateTime @default(now())
}

model PinLoginRequest {
  id        String   @id @default(cuid()) @map("_id")
  email     String   @unique
  pinHash   String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Wallet {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  address String @unique
  balance Float

  user         User              @relation(fields: [userId], references: [id])
  transactions Transaction[]
  blockchain   BlockchainWallet? @relation(name: "WalletToBlockchain")
}

model BlockchainWallet {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  walletId String @unique @db.ObjectId
  userId   String @unique @db.ObjectId

  wallet Wallet @relation(name: "WalletToBlockchain", fields: [walletId], references: [id])
  user   User   @relation(name: "UserToBlockchainWallet", fields: [userId], references: [id])
}

model Transaction {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  walletId  String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  wallet    Wallet    @relation(fields: [walletId], references: [id])
  type      String
  amount    Float
  tokenType TokenType
  txHash    String?
  metadata  Json?
  createdAt DateTime  @default(now())
}

model Stake {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  amount    Float
  apy       Float
  type      String
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
}

model InvestmentProposal {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  title       String
  description String
  amount      Float
  status      String?  @default("pending")
  createdAt   DateTime @default(now())
}

model NFTBadge {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  name        String
  description String?
  imageUrl    String?
  mintedAt    DateTime @default(now())
}

model SimProfile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  deviceId  String
  carrier   String
  country   String
  simHash   String
  createdAt DateTime @default(now())
}

model NodeSyncStatus {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  status   String
  syncedAt DateTime
}

model RevokedToken {
  id        String   @id @default(cuid()) @map("_id")
  rawToken  String
  partner   String
  tier      String
  createdAt DateTime @default(now())

  userId String? @db.ObjectId // ‚úÖ Add this
  user   User?   @relation(fields: [userId], references: [id])
}

enum TokenType {
  AXG
  NMP
  USD
  OTHER
}

model Partner {
  id        String   @id @default(cuid()) @map("_id")
  name      String
  slug      String   @unique
  tier      String
  email     String?
  docs      String[]
  token     String   @unique
  createdAt DateTime @default(now())
}

model TokenAccessLog {
  id         String   @id @default(cuid()) @map("_id")
  token      String
  tier       String
  partner    String
  path       String
  accessedAt DateTime @default(now())
}

model IssuedToken {
  id        String   @id @default(cuid()) @map("_id")
  partner   String
  tier      String
  docs      String[]
  token     String
  createdAt DateTime @default(now())
}

model LogoutLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  timestamp  DateTime @default(now())
  reason     String
  ip         String
  userAgent  String
}

model SessionActionLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  action    String
  timestamp DateTime @default(now())
  ip        String?
  userAgent String?
}