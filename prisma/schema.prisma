generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Subscriber {  // ðŸ‘ˆ This means we use "subscriber" in queries
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
}

// âœ… User Accounts & Authentication
model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Session {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique
}

// âœ… Transaction Type Enum
enum TransactionTypeEnum {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
}

// âœ… Transaction Status Enum
enum TransactionStatusEnum {
  PENDING
  COMPLETED
  FAILED
}

// âœ… Transactions Model
model Transaction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId    String   @db.ObjectId @map("senderId")
  recipientId String   @db.ObjectId @map("recipientId")
  userId      String   @db.ObjectId @map("userId") // âœ… Added to track which user owns the transaction
  amount      Float 
  type        TransactionTypeEnum 
  status      TransactionStatusEnum @default(PENDING) // âœ… Enum for safer status management
  createdAt   DateTime @default(now()) @map("createdAt") @db.Date 

  // âœ… Correctly Define Relationships
  sender    User @relation(name: "SentTransactions", fields: [senderId], references: [id])
  recipient User @relation(name: "ReceivedTransactions", fields: [recipientId], references: [id])

  // âœ… Indexes for Query Optimization
  @@index([senderId])
  @@index([recipientId])
  @@index([userId]) // âœ… New index for user-based queries
  @@index([createdAt]) 
}

// âœ… Users Model
model User {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime @default(now()) @map("createdAt") @db.Date
  updatedAt           DateTime @updatedAt @map("updatedAt") @db.Date
  email               String   @unique
  encryptedPrivateKey String
  industry            String?
  interests           String?
  isAdmin             Boolean  @default(false)
  iv                  String
  name                String
  password            String
  role                String   @default("user")
  walletAddress       String?  @unique
  walletBalance       Float    @default(0)
  avatar              String?

  // âœ… Correctly link transactions to users
  sentTransactions     Transaction[] @relation(name: "SentTransactions")
  receivedTransactions Transaction[] @relation(name: "ReceivedTransactions")
}

// âœ… Email Verification
model VerificationToken {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String @unique
  token      String @unique

  @@unique([identifier, token])
}

// âœ… JWT Revocation for Security
model RevokedToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  jti       String   @unique // âœ… Keep only the unique constraint
  expiresAt DateTime // Expiration timestamp

  // âœ… Speed up token expiration cleanup
  @@index([expiresAt])
}